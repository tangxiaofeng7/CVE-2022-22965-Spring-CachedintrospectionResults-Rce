package main

import (
	"bufio"
	"flag"
	"fmt"
	"github.com/go-resty/resty/v2"
	"github.com/panjf2000/ants/v2"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

var finalresult []string

func verify(target interface{}) {
	t := target.(string)
	//第一个请求(发送如下数据包获取200)
	client1 := resty.New()
	client1.SetTimeout(15 * time.Second)
	resp1, err := client1.R().SetQueryParam("class.module.classLoader.DefaultAssertionStatus", "true").Get(t)
	if err != nil {
		fmt.Println("Request1 error: " + t)
	} else {
		if resp1.StatusCode() == http.StatusOK {
			//第2个请求(发送如下数据包获取400)
			client2 := resty.New()
			client2.SetTimeout(15 * time.Second)
			resp2, err := client2.R().SetQueryParam("class.module.classLoader.DefaultAssertionStatus", "x").Get(t)
			if err != nil {
				fmt.Println("Request2 error: " + t)
			} else {
				if resp2.StatusCode() == http.StatusBadRequest {
					fmt.Println(t + " is vulnerable")
					finalresult = append(finalresult, t)
				}
			}
		} else {
			client3 := resty.New()
			client3.SetTimeout(15 * time.Second)
			resp3, err := client3.R().SetHeader("Content-Type", "application/x-www-form-urlencoded").SetBody("class.module.classLoader.DefaultAssertionStatus=true").Post(t)
			if err != nil {
				fmt.Println("Request3 error: " + t)
			} else {
				if resp3.StatusCode() == http.StatusOK {
					client4 := resty.New()
					client4.SetTimeout(15 * time.Second)
					resp4, err := client3.R().SetHeader("Content-Type", "application/x-www-form-urlencoded").SetBody("class.module.classLoader.DefaultAssertionStatus=x").Post(t)
					if err != nil {
						fmt.Println("Request4 error: " + t)
					} else {
						if resp4.StatusCode() == http.StatusBadRequest {
							fmt.Println(t + " is vulnerable")
							finalresult = append(finalresult, t)
						}
					}
				}
			}
		}

	}
}

func main() {
	var targetURL, filepath string
	var thread int
	targets := []string{}
	flag.StringVar(&targetURL, "u", "", "")
	flag.StringVar(&filepath, "l", "", "")
	flag.IntVar(&thread, "t", 10, "")
	flag.CommandLine.Usage = func() {
		fmt.Println("单个检测：./CVE-2022-22965 -u http://127.0.0.1:8080")
		fmt.Println("批量检测：./CVE-2022-22965 -l url.txt ")
	}
	flag.Parse()

	if len(targetURL) == 0 {
		file, err := os.OpenFile(filepath, os.O_RDWR, 0666)
		if err != nil {
			fmt.Println("Open file error!", err)
			return
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			target := scanner.Text()
			if target == "" {
				continue
			}
			if !strings.Contains(target, "http") {
				target = "http://" + target
			}
			targets = append(targets, target)
		}
		wg := sync.WaitGroup{}
		p, _ := ants.NewPoolWithFunc(thread, func(i interface{}) {
			verify(i)
			wg.Done()
		})
		defer p.Release()

		for _, t := range targets {
			wg.Add(1)
			_ = p.Invoke(t)
		}
		wg.Wait()
		fileName := "vuln.txt"
		file, err = os.Create(fileName)
		if err != nil {
			return
		}
		defer file.Close()
		for _, v := range finalresult {
			file.WriteString(v + "\n")
		}

	} else {
		verify(targetURL)
	}
}
